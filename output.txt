Project Tree:
```
├── .gitignore
├── .vscode/
│   └── tasks.json
├── README.md
├── dfx_runtime.txt
├── output.txt
├── scripts/
│   ├── build.tcl
│   ├── clean.tcl
│   ├── dfx_runtime.txt
│   ├── program.tcl
│   ├── sim.tcl
│   ├── sim_gtkwave.tcl
│   ├── simulate_terminal.tcl
│   ├── simulate_with_vcd.tcl
│   └── synth_only.tcl
└── src/
    ├── constraints/
    │   └── arty_a7.xdc
    ├── hdl/
    │   ├── data_acq_top.sv
    │   ├── led_blinker.sv
    │   └── top_clkgen.sv
    └── testbench/
        ├── tb_clkgen.sv
        └── tb_top.sv
```

# File: .gitignore
```text
﻿# Vivado generated files
*.jou
*.log
*.str
*.xpr.bak
vivado.jou
vivado.log
*.cache/
*.hw/
*.ip_user_files/
*.runs/
*.sim/
*.srcs/sources_1/ip/*/
*.gen/
*.hbs
*.dcp
*.bit
*.ltx
*.rpt
*.xml
*.tmp
*.debug
*.wdb
*.wcfg

# Output directory
output/

# OS files
Thumbs.db
.DS_Store
*.tmp
*~

# Keep these files
!*.xdc
!*.v
!*.vhd
!*.sv
!*.tcl
!*.md
```
# End of file: .gitignore

# File: .vscode/tasks.json
```json
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "FPGA: Full Build",
            "type": "shell",
            "command": "C:\\Xilinx\\2025.1\\Vivado\\bin\\vivado.bat",
            "args": ["-mode", "batch", "-source", "build.tcl"],
            "options": {
                "cwd": "${workspaceFolder}/scripts"
            },
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": false
            },
            "problemMatcher": []
        },
        {
            "label": "FPGA: Synthesis Only",
            "type": "shell",
            "command": "C:\\Xilinx\\2025.1\\Vivado\\bin\\vivado.bat",
            "args": ["-mode", "batch", "-source", "synth_only.tcl"],
            "options": {
                "cwd": "${workspaceFolder}/scripts"
            },
            "group": "build"
        },
        {
            "label": "FPGA: Program Device",
            "type": "shell",
            "command": "C:\\Xilinx\\2025.1\\Vivado\\bin\\vivado.bat",
            "args": ["-mode", "batch", "-source", "program.tcl"],
            "options": {
                "cwd": "${workspaceFolder}/scripts"
            }
        }
    ]
}
```
# End of file: .vscode/tasks.json

# File: README.md
```markdown
﻿# my_arty_project

FPGA project for Arty A7-100T board using Vivado non-project mode workflow.

## Project Structure
- src/hdl/ - Verilog source files
- src/constraints/ - XDC constraint files  
- scripts/ - TCL build scripts
- output/ - Generated bitstreams and reports (ignored by git)

## Quick Start

1. **Open in VSCode**: Open this folder in VSCode
2. **Build**: Press Ctrl+Shift+P â†’ "Tasks: Run Task" â†’ "FPGA: Full Build"  
3. **Program**: Run task "FPGA: Program Device"

## Command Line Usage

cd scripts

# Full build (synthesis + implementation + bitstream)
vivado -mode batch -source build.tcl

# Synthesis only (for quick checks)
vivado -mode batch -source synth_only.tcl

# Program the device
vivado -mode batch -source program.tcl
`

## Development Workflow

1. Edit Verilog files in src/hdl/
2. Modify constraints in src/constraints/ 
3. Run synthesis to check for errors
4. Run full build when ready
5. Program device and test
6. Commit changes to git

## Files

- **Top Module**: $TopModule.v
- **Constraints**: arty_a7.xdc 
- **Target Device**: xc7a100tcsg324-1

Built with Vivado non-project mode for clean version control.

# PUSH TOKEN COMMAND




# clean command in scripts dir
vivado -mode batch -source clean.tcl

# SYN COMMANDS
# Check default module (top)
vivado -mode batch -source synth_only.tcl

# Check specific module  
vivado -mode batch -source synth_only.tcl -tclargs top_clkgen
vivado -mode batch -source synth_only.tcl -tclargs clk_gen


# PROGRAM COMMANDS (replace end of line with module name)
vivado -mode batch -source program.tcl -tclargs top_clkgen  

# sim waves command for vivado gui
export_simulation  -directory "C:/Users/dwang/AppData/Roaming/Xilinx/Vivado/." -simulator xsim 



## in vscode terminal working
& "C:\Xilinx\2025.1\Vivado\bin\vivado.bat" -mode batch -source build.tcl

or

vivado -mode batch -source build.tcl -tclargs clk_gen
vivado -mode batch -source build.tcl -tclargs top

& "C:\Xilinx\2025.1\Vivado\bin\vivado.bat" -mode batch -source program.tcl

## working in gui
source build.tcl
source program.tcl

get_ports
get_ports led*

# Check if constraints were applied
get_pins -of_objects [get_ports led*]

& "C:\Xilinx\2025.1\Vivado\bin\vivado.bat" -mode batch -source simulate.tcl

ssh -X dwang@100.93.4.75

# wave process from rpi:

vivado -mode batch -source simulate_with_vcd.tcl
scp "C:/Users/dwang/Documents/fpga_dev/my_arty_project/output/waves.vcd" tripod@100.81.165.41:/home/tripod/Desktop/
# On RPi4
cd ~/Desktop
gtkwave waves.vcd


scp "C:/Users/dwang/Documents/fpga_dev/my_arty_project/output/waves.vcd" tripod@100.81.165.41:/home/tripod/Desktop/


vivado -mode batch -source simulate_with_vcd.tcl -tclargs tb_clkgen
vivado -mode batch -source simulate_with_vcd.tcl -tclargs tb_top



# Solution 4: Simplified Approach
Since your GUI simulation works, just open Vivado GUI and run:
powershell# Open Vivado GUI, then in Tcl Console:
& "C:\Xilinx\2025.1\Vivado\bin\vivado.bat" -mode gui
Then in GUI Tcl Console:
tclcd C:/Users/dwang/Documents/fpga_dev/my_arty_project/scripts
source simulate_terminal.tcl


# vivado -mode batch -source simulate_with_vcd.tcl -tclargs <testbench_name>
ex: vivado -mode batch -source simulate_with_vcd.tcl -tclargs tb_top





# 1. Test logic first
vivado -mode batch -source simulate_with_vcd.tcl -tclargs tb_clkgen

After sim, run scp command to view waves on rpi

# 2. Quick syntax/timing check (30 seconds)
vivado -mode batch -source synth_only.tcl -tclargs top_clkgen

# 3. If synthesis passes, do full build (2-3 minutes)
vivado -mode batch -source build.tcl -tclargs top_clkgen

# 4. Program and test on hardware


# vnc/gui use from rpi
ssh -L 5900:100.93.4.75:5900 windows-desktop
vncviewer localhost:5900

```
# End of file: README.md

# File: dfx_runtime.txt
```text
DFXRuntime Profile Report:
Total Application(DFX) Runtime :                  CPU : 0:0:6 WALL : 0:0:0  0.00 % 
```
# End of file: dfx_runtime.txt

# File: output.txt
```text

```
# End of file: output.txt

# File: scripts/build.tcl
```text
# Non-project mode build script for my_arty_project
set_param general.maxThreads 8

# Set part and top module
set part "xc7a100tcsg324-1"

# Get top module from command line argument
if {$argc >= 1} {
    set top_module [lindex $argv 0]
} else {
    set top_module "top_clkgen"  # Default fallback
}   

# Clean any previous run
if {[file exists ../output]} {
    file delete -force ../output
}
file mkdir ../output

# IP files (comment out if no IP used)
# read_ip [glob -nocomplain ../src/ip/*/*.xci]
# upgrade_ip [get_ips]
# generate_target all [get_ips]

# Read source files .... comment either v or sv 
puts "Reading source files..."
# add_files [glob ../src/hdl/*.v]
add_files [glob ../src/hdl/*.sv]

read_xdc [glob ../src/constraints/*.xdc]

# Set top module
set_property top $top_module [current_fileset]

puts "Starting synthesis..."
synth_design -top $top_module -part $part

# Write checkpoint
write_checkpoint -force ../output/post_synth.dcp

puts "Starting implementation..."
opt_design
place_design
route_design

# Write final checkpoint
write_checkpoint -force ../output/post_route.dcp

puts "Generating bitstream..."
write_bitstream -force ../output/${top_module}.bit

# Generate reports
puts "Generating reports..."
report_utilization -file ../output/utilization.rpt
report_timing -file ../output/timing.rpt
report_power -file ../output/power.rpt

puts "Build complete! Bitstream: ../output/${top_module}.bit"
```
# End of file: scripts/build.tcl

# File: scripts/clean.tcl
```text
# Enhanced clean script for FPGA project
puts "Cleaning project files..."

# Remove output directory
if {[file exists ../output]} {
    puts "Removing output directory..."
    file delete -force ../output
}

# Remove ALL simulation project directories (ENHANCED)
set sim_dirs {../sim_auto ../sim_gtk ../sim_vcd ../sim_terminal ../sim}
foreach sim_dir $sim_dirs {
    if {[file exists $sim_dir]} {
        puts "Removing simulation directory: $sim_dir"
        file delete -force $sim_dir
    }
}

# Clean Xilinx generated files in scripts directory
if {[file exists .Xil]} {
    puts "Removing .Xil directory..."
    file delete -force .Xil
}

# Remove individual generated files in scripts
set cleanup_files {clockInfo.txt dfx_runtime.txt xelab.pb}
foreach file $cleanup_files {
    if {[file exists $file]} {
        puts "Removing $file"
        file delete -force $file
    }
}

# Try to remove log files (may fail if Vivado is using them - that's OK)
set log_files {vivado.jou vivado.log}
foreach file $log_files {
    if {[file exists $file]} {
        puts "Attempting to remove $file"
        if {[catch {file delete -force $file} error]} {
            puts "  Note: $file is in use by Vivado (this is normal)"
        } else {
            puts "  Successfully removed $file"
        }
    }
}

# Remove any checkpoint files in project root
set checkpoint_files [glob -nocomplain ../*.dcp]
foreach file $checkpoint_files {
    puts "Removing checkpoint: $file"
    file delete -force $file
}

# Remove any log files in project root
set log_files_root [glob -nocomplain ../*.log]
foreach file $log_files_root {
    puts "Removing log: $file"
    file delete -force $file
}

# Remove any journal files in project root (ADDED)
set jou_files [glob -nocomplain ../*.jou]
foreach file $jou_files {
    puts "Removing journal: $file"
    file delete -force $file
}

# Clean up any VCD files that might be left in root (ADDED)
set vcd_files [glob -nocomplain ../*.vcd]
foreach file $vcd_files {
    puts "Removing VCD file: $file"
    file delete -force $file
}

puts "Clean complete!"
puts "All generated files have been removed."
puts "Source files and constraints are preserved."
puts ""
puts "Directories cleaned:"
puts "  - output/"
puts "  - sim_*/ (all simulation projects)"
puts "  - .Xil/"
puts "Files cleaned:"
puts "  - *.log, *.jou, *.dcp, *.vcd"
puts "  - dfx_runtime.txt, xelab.pb"
```
# End of file: scripts/clean.tcl

# File: scripts/dfx_runtime.txt
```text
DFXRuntime Profile Report:
Total Application(DFX) Runtime :                  CPU : 0:0:5 WALL : 0:0:0  0.00 % 
```
# End of file: scripts/dfx_runtime.txt

# File: scripts/program.tcl
```text
# Program Arty A7 board
# Usage: vivado -mode batch -source program.tcl -tclargs top_clkgen

# Module selection for bitstream file
if {$argc >= 1} {
    set top_module [lindex $argv 0]
} else {
    set top_module "top"  
}

set bitstream_file "../output/${top_module}.bit"

puts "Programming with bitstream: $bitstream_file"

# Check if bitstream exists
if {![file exists $bitstream_file]} {
    puts "ERROR: Bitstream file not found: $bitstream_file"
    puts "Run full build first with: vivado -mode batch -source build.tcl -tclargs $top_module"
    exit 1
}

puts "Opening hardware manager..."
open_hw_manager
connect_hw_server

puts "Opening hardware target..."
open_hw_target

# Find the FPGA device
set device [lindex [get_hw_devices] 0]
puts "Found device: $device"

# Set bitstream file
set_property PROGRAM.FILE $bitstream_file $device

puts "Programming device with $top_module..."
program_hw_devices $device

puts "Programming complete!"
close_hw_manager
```
# End of file: scripts/program.tcl

# File: scripts/sim.tcl
```text
# Simple simulation script with automatic waveform viewing
# Usage: vivado -mode gui -source sim.tcl
# This will open Vivado with simulation and waves automatically loaded

# Configuration - MODIFY FOR YOUR PROJECT
set top_module "top"
set testbench "tb_top"

puts "Starting simulation for $testbench..."

# Clean up any existing simulation
catch {close_sim -quiet}
catch {close_project -quiet}

# Remove old simulation directory
set sim_dir "../sim_auto"
if {[file exists $sim_dir]} {
    puts "Cleaning up existing simulation..."
    file delete -force $sim_dir
}

# Create simulation project
create_project -force sim_auto $sim_dir -part xc7a100tcsg324-1

# Add source files
add_files -fileset sources_1 [glob -nocomplain ../src/hdl/*.v]
add_files -fileset sources_1 [glob -nocomplain ../src/hdl/*.sv]
add_files -fileset sim_1 [glob -nocomplain ../src/testbench/*.v]

# Set simulation properties
set_property top $testbench [get_filesets sim_1]
set_property top_lib xil_defaultlib [get_filesets sim_1]
update_compile_order -fileset sim_1

puts "Launching simulation..."
launch_simulation

# Add all signals automatically (only works in GUI mode)
if {[string compare [get_property MODE [current_project]] "GUI"] == 0} {
    add_wave -recursive /$testbench
    # Run simulation (adjust time as needed)
    puts "Running simulation for 1000ns..."
    run 1000ns
    # Auto-zoom to fit
    wave zoom full
} else {
    # In batch mode, just run simulation
    puts "Running simulation for 1000ns..."
    run 1000ns
    puts "Simulation complete - no waves in batch mode"
}

puts "Simulation complete!"
puts "Waveform viewer should be open."
puts "Close Vivado when done viewing waveforms."
```
# End of file: scripts/sim.tcl

# File: scripts/sim_gtkwave.tcl
```text
# Simulation script that generates VCD for GTKWave
# Place this file in your scripts/ directory

set top_module "top"
set testbench "tb_top"

puts "Starting simulation for GTKWave..."

# Clean up
catch {close_sim -quiet}
catch {close_project -quiet}

set sim_dir "../sim_gtk"
if {[file exists $sim_dir]} {
    file delete -force $sim_dir
}

# Create simulation project
create_project -force sim_gtk $sim_dir -part xc7a100tcsg324-1

# Add files
add_files -fileset sources_1 [glob -nocomplain ../src/hdl/*.v]
add_files -fileset sources_1 [glob -nocomplain ../src/hdl/*.sv]
add_files -fileset sim_1 [glob -nocomplain ../src/testbench/*.v]

# Set simulation properties
set_property top $testbench [get_filesets sim_1]
set_property top_lib xil_defaultlib [get_filesets sim_1]
update_compile_order -fileset sim_1

# Launch simulation
launch_simulation

# Run simulation
puts "Running simulation..."
run 1000ns

# Export VCD file for GTKWave
puts "Exporting VCD file for GTKWave..."
set vcd_file "../output/simulation.vcd"
file mkdir ../output

# Open VCD file for writing
open_vcd $vcd_file

# Log all signals
log_vcd [get_objects -recursive]

# Restart and run again to capture all data
restart
run 1000ns

# Close VCD file
close_vcd

puts "VCD file created: $vcd_file"
puts "You can now view with: gtkwave $vcd_file"

# Close simulation
close_sim
close_project
```
# End of file: scripts/sim_gtkwave.tcl

# File: scripts/simulate_terminal.tcl
```text
# Clean up any existing simulation
catch {close_sim -quiet}
catch {close_project -quiet}

# Remove old simulation directory to avoid file locks
set sim_dir "../sim_terminal"
if {[file exists $sim_dir]} {
    puts "Cleaning up existing simulation..."
    catch {file delete -force $sim_dir}
    after 1000
}

# Create simulation project
create_project -force sim_project_terminal $sim_dir -part xc7a100tcsg324-1

# Add source files
add_files -fileset sources_1 [glob ../src/hdl/*.v]
add_files -fileset sim_1 ../src/testbench/tb_top.v

# Set simulation properties
set_property top tb_top [get_filesets sim_1]
set_property top_lib xil_defaultlib [get_filesets sim_1]
update_compile_order -fileset sim_1

puts "Launching simulation..."
launch_simulation

puts "Adding waveforms..."
# Add signals to waveform
add_wave -divider "Clock and Reset"
add_wave /tb_top/clk
add_wave /tb_top/rst_n

add_wave -divider "Test Signals"  
add_wave /tb_top/sw
add_wave /tb_top/led

# Run simulation
puts "Running simulation for 1000ns..."
run 1000ns

# Zoom to show all data
wave zoom full

puts "Simulation complete!"
puts "Waveform viewer should be open."
puts "Clock should toggle every 5ns (10ns period)"

# Keep the simulation open
puts "Press Ctrl+C to close when done viewing waveforms."
```
# End of file: scripts/simulate_terminal.tcl

# File: scripts/simulate_with_vcd.tcl
```text
catch {close_sim -quiet}
catch {close_project -quiet}

# Remove old simulation directory
set sim_dir "../sim_vcd"
if {[file exists $sim_dir]} {
    puts "Cleaning up existing simulation..."
    catch {file delete -force $sim_dir}
    after 1000
}

# Ensure output directory exists
if {![file exists ../output]} {
    file mkdir ../output
}

# Get testbench name from command line
if {$argc >= 1} {
    set testbench [lindex $argv 0]
} else {
    set testbench "tb_top"  
}

# Create simulation project
create_project -force sim_vcd_project $sim_dir -part xc7a100tcsg324-1

# Add source files to the project and CHANGE V OR SV AS NEEDED
# add_files -fileset sources_1 [glob ../src/hdl/*.v]
add_files -fileset sources_1 [glob ../src/hdl/*.sv]
add_files -fileset sim_1 [glob ../src/testbench/*.sv]

# Set simulation properties (FIXED: Use variable instead of hardcoded)
set_property top $testbench [get_filesets sim_1]
set_property top_lib xil_defaultlib [get_filesets sim_1]

# Update compile order
update_compile_order -fileset sim_1

puts "Launching simulation for testbench: $testbench"
launch_simulation

puts "Starting VCD capture from clean state..."

# First restart simulation to clean state
restart

# Set up VCD logging with absolute path
set vcd_path [file normalize "../output/waves.vcd"]
puts "VCD file will be saved to: $vcd_path"

open_vcd $vcd_path
# FIXED: Use variable instead of hardcoded path
log_vcd [get_objects -recursive /$testbench/*]

puts "Running simulation for 1000ns..."
run 1000ns

puts "Closing VCD file..."
close_vcd

puts "Simulation complete!"
puts "VCD file saved to: $vcd_path"
puts "Transfer this file to your RPi4 and view with: gtkwave waves.vcd"
```
# End of file: scripts/simulate_with_vcd.tcl

# File: scripts/synth_only.tcl
```text
# Synthesis-only script for quick checks
# Usage: vivado -mode batch -source synth_only.tcl -tclargs top_clkgen

# Module selection
if {$argc >= 1} {
    set top_module [lindex $argv 0]
} else {
    set top_module "top"  # default
}

set part "xc7a100tcsg324-1"

puts "Synthesizing module: $top_module"

# Read all source files (both .v and .sv)
# read_verilog [glob -nocomplain ../src/hdl/*.v]
read_verilog [glob -nocomplain ../src/hdl/*.sv]
read_xdc [glob ../src/constraints/*.xdc]

set_property top $top_module [current_fileset]

puts "Starting synthesis..."
synth_design -top $top_module -part $part

puts "Synthesis complete!"
puts "Generating quick reports..."

# Quick reports
report_utilization
report_timing -max_paths 10

puts "Check complete for module: $top_module"
```
# End of file: scripts/synth_only.tcl

# File: src/constraints/arty_a7.xdc
```text
## Clock signal 100MHz
set_property -dict { PACKAGE_PIN E3    IOSTANDARD LVCMOS33 } [get_ports { clk }]
create_clock -add -name sys_clk_pin -period 10.00 -waveform {0 5} [get_ports {clk}]

## Switches
set_property -dict { PACKAGE_PIN A8    IOSTANDARD LVCMOS33 } [get_ports { sw[0] }]
set_property -dict { PACKAGE_PIN C11   IOSTANDARD LVCMOS33 } [get_ports { sw[1] }]
set_property -dict { PACKAGE_PIN C10   IOSTANDARD LVCMOS33 } [get_ports { sw[2] }]
set_property -dict { PACKAGE_PIN A10   IOSTANDARD LVCMOS33 } [get_ports { sw[3] }]

## LEDs - YOUR WORKING VERSION - KEEP THESE ACTIVE
set_property -dict { PACKAGE_PIN H5    IOSTANDARD LVCMOS33 } [get_ports { led[0] }]
set_property -dict { PACKAGE_PIN J5    IOSTANDARD LVCMOS33 } [get_ports { led[1] }]
set_property -dict { PACKAGE_PIN T9    IOSTANDARD LVCMOS33 } [get_ports { led[2] }]
set_property -dict { PACKAGE_PIN T10   IOSTANDARD LVCMOS33 } [get_ports { led[3] }]

## Reset button
set_property -dict { PACKAGE_PIN C12   IOSTANDARD LVCMOS33 } [get_ports { rst_n }]

## ============================================================================
## FUTURE OPTIONS - UNCOMMENT WHEN NEEDED
## ============================================================================

## RGB LEDs (uncomment these 4 lines and comment out LEDs above to use RGB)
# set_property -dict { PACKAGE_PIN G6    IOSTANDARD LVCMOS33 } [get_ports { led[0] }]  # RGB0_Red
# set_property -dict { PACKAGE_PIN F6    IOSTANDARD LVCMOS33 } [get_ports { led[1] }]  # RGB0_Green
# set_property -dict { PACKAGE_PIN E1    IOSTANDARD LVCMOS33 } [get_ports { led[2] }]  # RGB0_Blue
# set_property -dict { PACKAGE_PIN G3    IOSTANDARD LVCMOS33 } [get_ports { led[3] }]  # RGB1_Red

## Additional Buttons (if you need more buttons in future)
# set_property -dict { PACKAGE_PIN D9    IOSTANDARD LVCMOS33 } [get_ports { btn[0] }]
# set_property -dict { PACKAGE_PIN C9    IOSTANDARD LVCMOS33 } [get_ports { btn[1] }]
# set_property -dict { PACKAGE_PIN B9    IOSTANDARD LVCMOS33 } [get_ports { btn[2] }]
# set_property -dict { PACKAGE_PIN B8    IOSTANDARD LVCMOS33 } [get_ports { btn[3] }]

## UART (for serial communication)
# set_property -dict { PACKAGE_PIN D10   IOSTANDARD LVCMOS33 } [get_ports { uart_txd }]
# set_property -dict { PACKAGE_PIN A9    IOSTANDARD LVCMOS33 } [get_ports { uart_rxd }]

## All 6 RGB LED colors (if you want more colorful displays)
# set_property -dict { PACKAGE_PIN G6    IOSTANDARD LVCMOS33 } [get_ports { rgb0_red }]
# set_property -dict { PACKAGE_PIN F6    IOSTANDARD LVCMOS33 } [get_ports { rgb0_green }]
# set_property -dict { PACKAGE_PIN E1    IOSTANDARD LVCMOS33 } [get_ports { rgb0_blue }]
# set_property -dict { PACKAGE_PIN G3    IOSTANDARD LVCMOS33 } [get_ports { rgb1_red }]
# set_property -dict { PACKAGE_PIN J4    IOSTANDARD LVCMOS33 } [get_ports { rgb1_green }]
# set_property -dict { PACKAGE_PIN G4    IOSTANDARD LVCMOS33 } [get_ports { rgb1_blue }]
```
# End of file: src/constraints/arty_a7.xdc

# File: src/hdl/data_acq_top.sv
```text
`timescale 1ns / 1ps

module top (
    input clk,
    input rst_n,
    input [3:0] sw,
    output [3:0] led
);

// Just turn all LEDs on - simplest possible test
assign led = 4'b1111;

endmodule
```
# End of file: src/hdl/data_acq_top.sv

# File: src/hdl/led_blinker.sv
```text
module led_blinker (
    input wire clk_sys,         // 100MHz system clock
    input wire clk_fast,        // 200MHz (or 50MHz) fast clock
    input wire reset,           // Active high reset
    input wire locked,          // PLL locked signal
    output reg blink_1hz,       // 1Hz blink output
    output reg blink_2hz,       // 2Hz blink output  
    output reg blink_fast       // Fast blink output
);

    // Counter sizes for different blink rates
    // For 100MHz clock: 
    // 1Hz = 100M/2 = 50M cycles
    // 2Hz = 100M/4 = 25M cycles
    localparam COUNT_1HZ = 26'd50_000_000;  // 1Hz toggle
    localparam COUNT_2HZ = 25'd25_000_000;  // 2Hz toggle
    localparam COUNT_FAST = 20'd500_000;    // Fast blink (~100Hz)
    
    // Counters
    reg [25:0] counter_1hz;
    reg [24:0] counter_2hz; 
    reg [19:0] counter_fast;
    
    // 1Hz blinker (slowest)
    always_ff @(posedge clk_sys or posedge reset) begin
        if (reset || !locked) begin
            counter_1hz <= 26'd0;
            blink_1hz <= 1'b0;
        end else begin
            if (counter_1hz >= COUNT_1HZ - 1) begin
                counter_1hz <= 26'd0;
                blink_1hz <= ~blink_1hz;
            end else begin
                counter_1hz <= counter_1hz + 1;
            end
        end
    end
    
    // 2Hz blinker (medium speed)
    always_ff @(posedge clk_sys or posedge reset) begin
        if (reset || !locked) begin
            counter_2hz <= 25'd0;
            blink_2hz <= 1'b0;
        end else begin
            if (counter_2hz >= COUNT_2HZ - 1) begin
                counter_2hz <= 25'd0;
                blink_2hz <= ~blink_2hz;
            end else begin
                counter_2hz <= counter_2hz + 1;
            end
        end
    end
    
    // Fast blinker (uses fast clock)
    always_ff @(posedge clk_fast or posedge reset) begin
        if (reset || !locked) begin
            counter_fast <= 20'd0;
            blink_fast <= 1'b0;
        end else begin
            if (counter_fast >= COUNT_FAST - 1) begin
                counter_fast <= 20'd0;
                blink_fast <= ~blink_fast;
            end else begin
                counter_fast <= counter_fast + 1;
            end
        end
    end

endmodule
```
# End of file: src/hdl/led_blinker.sv

# File: src/hdl/top_clkgen.sv
```text
`timescale 1ns / 1ps

// Ultra-slow approach - back to basics
module top_module (
    input clk,              // 100MHz system clock (matches your constraints)
    input rst_n,            // Reset button (active low, matches your constraints)
    input [3:0] sw,         // 4 slide switches (matches your constraints)
    output [3:0] led        // 4 User LEDs (matches your constraints)
);
    // MASSIVE counter for ultra-slow blinking
    reg [31:0] counter = 0;
    reg [3:0] blink_pattern = 0;
    
    // Count to 400 million = 4 seconds at 100MHz
    parameter COUNT_4SEC = 400_000_000;
    
    always @(posedge clk) begin
        if (!rst_n) begin
            counter <= 0;
            blink_pattern <= 0;
        end else begin
            if (counter >= (COUNT_4SEC - 1)) begin
                counter <= 0;
                blink_pattern <= blink_pattern + 1;  // Change every 4 seconds
            end else begin
                counter <= counter + 1;
            end
        end
    end
    
    // Show the pattern - should change every 4 seconds
    assign led = blink_pattern;
endmodule

// Testbench
module tb_top_module;
    // Testbench signals
    reg clk;
    reg rst_n;
    reg [3:0] sw;
    wire [3:0] led;
    
    // Clock generation - 100MHz (10ns period)
    initial begin
        clk = 0;
        forever #5 clk = ~clk;  // 10ns period = 100MHz
    end
    
    // Instantiate the module under test
    top_module uut (
        .clk(clk),
        .rst_n(rst_n),
        .sw(sw),
        .led(led)
    );
    
    // Test stimulus
    initial begin
        // Initialize inputs
        rst_n = 0;
        sw = 4'b0000;
        
        // Hold reset for a few cycles
        #100;
        rst_n = 1;
        
        // Let it run for a while to see counter behavior
        // Note: For simulation, we probably don't want to wait 4 billion ns!
        // So let's modify the parameter for simulation or just observe initial behavior
        #1000;
        
        // Test reset functionality
        rst_n = 0;
        #50;
        rst_n = 1;
        
        // Run for more cycles
        #2000;
        
        $finish;
    end
    
    // Monitor key signals
    initial begin
        $monitor("Time=%0t, rst_n=%b, counter=%0d, blink_pattern=%b, led=%b", 
                 $time, rst_n, uut.counter, uut.blink_pattern, led);
    end
    
    // For debugging - display counter value periodically
    always @(posedge clk) begin
        if (uut.counter % 1000000 == 0) begin // Every million cycles
            $display("Counter milestone: %0d", uut.counter);
        end
    end
    
endmodule
```
# End of file: src/hdl/top_clkgen.sv

# File: src/testbench/tb_clkgen.sv
```text
`timescale 1ns / 1ps

module tb_clkgen();
    // Testbench signals
    reg clk_in;
    reg reset_in;
    wire clk_sys;
    wire clk_fast;
    wire locked;
    
    // Instantiate the clock generator
    clk_gen dut (
        .clk_in(clk_in),
        .reset_in(reset_in),
        .clk_sys(clk_sys),
        .clk_fast(clk_fast),
        .locked(locked)
    );
    
    // Generate 100MHz input clock (10ns period)
    initial begin
        clk_in = 0;
        forever #5 clk_in = ~clk_in;  // 100MHz
    end
    
    // Test sequence
    initial begin
        $display("Starting clock generator simulation at time %0t", $time);
        
        // Initialize
        reset_in = 1;
        
        // Hold reset for a few cycles
        repeat(5) @(posedge clk_in);
        reset_in = 0;
        $display("Reset released at time %0t", $time);
        
        // Wait for lock
        wait(locked == 1);
        $display("Clock generator locked at time %0t", $time);
        
        // Run for a while to observe clocks
        repeat(50) @(posedge clk_in);
        
        // Test reset again
        $display("Testing reset at time %0t", $time);
        reset_in = 1;
        repeat(3) @(posedge clk_in);
        reset_in = 0;
        
        // Wait for lock again
        wait(locked == 1);
        $display("Re-locked at time %0t", $time);
        
        repeat(20) @(posedge clk_in);
        $display("Simulation complete at time %0t", $time);
        $finish;
    end
    
    // Monitor signals for debugging
    always @(posedge clk_in) begin
        $display("Time=%0t: clk_in=%b clk_sys=%b clk_fast=%b locked=%b reset=%b", 
                 $time, clk_in, clk_sys, clk_fast, locked, reset_in);
    end
    
    // Check that clk_fast is roughly 2x clk_in frequency
    integer clk_fast_count = 0;
    integer clk_in_count = 0;
    
    always @(posedge clk_fast) clk_fast_count++;
    always @(posedge clk_in) clk_in_count++;
    
    // Report frequency relationship every 20 input clocks
    always @(posedge clk_in) begin
        if (clk_in_count % 20 == 0 && locked) begin
            $display("Frequency check - clk_in cycles: %0d, clk_fast cycles: %0d, ratio: %0.1f", 
                     clk_in_count, clk_fast_count, real'(clk_fast_count)/real'(clk_in_count));
        end
    end
    
endmodule
```
# End of file: src/testbench/tb_clkgen.sv

# File: src/testbench/tb_top.sv
```text
`timescale 1ns / 1ps

module tb_top();
    reg clk;
    reg rst_n;
    reg [3:0] sw;
    wire [3:0] led;
    
    // Instantiate design under test
    top dut (
        .clk(clk),
        .rst_n(rst_n),
        .sw(sw),
        .led(led)
    );
    
    // Clock generation (100MHz)
    initial begin
        clk = 0;
        forever #5 clk = ~clk;  // 10ns period = 100MHz
    end
    
    // Test sequence with more activity
    initial begin
        $display("Starting simulation at time %0t", $time);
        
        // Initialize signals
        rst_n = 0;
        sw = 4'b0000;
        
        // Hold reset for several clocks
        repeat(10) @(posedge clk);
        rst_n = 1;
        $display("Reset released at time %0t", $time);
        
        // Test different switch combinations with clock delays
        repeat(5) @(posedge clk);
        sw = 4'b0001;
        $display("Switch = 0001 at time %0t, LED = %b", $time, led);
        
        repeat(5) @(posedge clk);
        sw = 4'b0010;
        $display("Switch = 0010 at time %0t, LED = %b", $time, led);
        
        repeat(5) @(posedge clk);
        sw = 4'b0100;
        $display("Switch = 0100 at time %0t, LED = %b", $time, led);
        
        repeat(5) @(posedge clk);
        sw = 4'b1000;
        $display("Switch = 1000 at time %0t, LED = %b", $time, led);
        
        repeat(5) @(posedge clk);
        sw = 4'b1111;
        $display("Switch = 1111 at time %0t, LED = %b", $time, led);
        
        repeat(10) @(posedge clk);
        $display("Simulation complete at time %0t", $time);
        $finish;
    end
    
    // Additional monitoring
    always @(posedge clk) begin
        $display("Time=%0t: clk=%b rst_n=%b sw=%b led=%b", $time, clk, rst_n, sw, led);
    end
    
endmodule
```
# End of file: src/testbench/tb_top.sv

